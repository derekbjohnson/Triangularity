@page "/calculate"
@using Triangularity.Models;
@using System.ComponentModel.DataAnnotations;
@inject Services.ApiService apiService

<h1>Calculate Triangle by Row and Column</h1>
<p>Given row (A-F) and column (1-12) determine triangle vertices:</p>

<EditForm Model="@ViewTriangle" OnValidSubmit="GetTriangleApiResponse">
    <DataAnnotationsValidator />
    <label for="row">Row</label><br />
    <InputText id="row" @bind-Value="ViewTriangle.Row" />
    <br /><label for="column">Column</label><br />
    <InputNumber id="column" @bind-Value="ViewTriangle.Column" />
    <br /><br /><button class="btn-primary" type="submit">Triangulate!</button>
</EditForm>
<br /> <img src="/images/sillyCoordinates.png" /> <br />
<ul>
    @foreach (var item in calculatedTriangles)
    {
        <li>Triangle @item.Row @item.Column would be at @item.Triangle.ToString() </li>
    }
</ul>

@code{     
    private Image Image { get; set; }
    private Triangle triangle { get; set; }
    public ViewElement ViewTriangle { get; set; }
    private List<ViewElement> calculatedTriangles = new List<ViewElement>();

    protected override void OnInitialized()
    {
        Image = new Image();
        ViewTriangle = new ViewElement();
        ViewTriangle.Row = "B";
        ViewTriangle.Column = 3;
    }
    
    private async void GetTriangleApiResponse()
    {
        ViewTriangle.Triangle = await apiService.GetTriangleByRowCol(char.Parse(ViewTriangle.Row), ViewTriangle.Column);
        calculatedTriangles.Add(new ViewElement(ViewTriangle.Triangle, ViewTriangle.Row, ViewTriangle.Column));
        StateHasChanged();
    }

    public class ViewElement
    {
        public Triangle Triangle { get; set; }

        [Required]
        [StringLength(1, ErrorMessage = "Whoops! That won't match a row in the image")]
        public string Row { get; set; }

        [Required]
        [Range(1, 12, ErrorMessage = "Invalid column size")]
        public int Column { get; set; }

        public ViewElement() { }

        public ViewElement(Triangle inTriangle, string inRow, int inColumn)
        {
            Triangle = inTriangle;
            Row = inRow;
            Column = inColumn;
        }
    }
}

