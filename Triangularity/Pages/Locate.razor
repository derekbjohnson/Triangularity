@page "/locate"

<h1>Locate Triangle By Vertices</h1>
<p>The task, calculate the triangle coordinates for an image with right triangles such that for a given row (A-F) and column (1-12) you can produce any of the triangles in the layout below</p>

<img src="/images/coordinates.jpg" alt="Triangularious!" />
<br/><br/>

     <EditForm Model="@inputShape" OnValidSubmit="AddTriangle">
         <DataAnnotationsValidator/> 
         <InputNumber @bind-Value="inputShape.v1x" />
         <InputNumber @bind-Value="inputShape.v1y" />
         <InputNumber @bind-Value="inputShape.v2x" />
         <InputNumber @bind-Value="inputShape.v2y" />
         <InputNumber @bind-Value="inputShape.v3x" />
         <InputNumber @bind-Value="inputShape.v3y" />
         <button type="submit">Locate!</button>
     </EditForm>
<br/><br/>

     <ul>
         @foreach (var shape in searchedElements)
         {
             <li>The coordinates @shape.triangle.Vertex1, @shape.triangle.Vertex2, @shape.triangle.Vertex3 would be @shape.location</li>
         }
     </ul>

@code{     
    public Triangularity.Models.Image img { get; set; }
    private viewTriangle inputShape = new viewTriangle();
    private List<viewTriangle> searchedElements = new List<viewTriangle>();

    protected override void OnInitialized()
    {
        img = new Triangularity.Models.Image();
    }

    private void AddTriangle()
    {
        try
        {
            inputShape.location = img.GetLocationByVertices(inputShape.v1x, inputShape.v1y, inputShape.v2x, inputShape.v2y, inputShape.v3x, inputShape.v3y);
            inputShape.triangle = new Models.Triangle(inputShape.v1x, inputShape.v1y, inputShape.v2x, inputShape.v2y, inputShape.v3x, inputShape.v3y);
            searchedElements.Add(new viewTriangle(inputShape.triangle, inputShape.location));
        }
        catch
        {
            //Do something brilliant
        }
    }

    public class viewTriangle
    {
        public Triangularity.Models.Triangle triangle { get; set; }

        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Range(1, 60, ErrorMessage = "Coordinate invalid for image size.")]
        public int v1x { get; set; } = 50;

        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Range(1, 60, ErrorMessage = "Coordinate invalid for image size.")]
        public int v1y { get; set; } = 20;

        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Range(1, 60, ErrorMessage = "Coordinate invalid for image size.")]
        public int v2x { get; set; } = 40;

        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Range(1, 60, ErrorMessage = "Coordinate invalid for image size.")]
        public int v2y { get; set; } = 20;

        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Range(1, 60, ErrorMessage = "Coordinate invalid for image size.")]
        public int v3x { get; set; } = 50;

        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.Range(1, 60, ErrorMessage = "Coordinate invalid for image size.")]
        public int v3y { get; set; } = 30;

        public string location { get; set; }

        public viewTriangle() { }

        public viewTriangle(Triangularity.Models.Triangle inTriangle, string inLocation)
        {
            triangle = inTriangle;
            location = inLocation;
        }
    }
}

