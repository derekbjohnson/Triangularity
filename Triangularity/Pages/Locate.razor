@page "/locate"

<h1>Locate Triangle By Vertices</h1>
<p>The task, calculate the triangle coordinates for an image with right triangles such that for a given row (A-F) and column (1-12) you can produce any of the triangles in the layout below</p>

<img src="/images/coordinates.jpg" alt="Triangularious!" />
<br/><br/>

     <EditForm Model="@img" OnValidSubmit="AddTriangle">
         <InputNumber @bind-Value="v1x" />
         <InputNumber @bind-Value="v1y" />
         <InputNumber @bind-Value="v2x" />
         <InputNumber @bind-Value="v2y" />
         <InputNumber @bind-Value="v3x" />
         <InputNumber @bind-Value="v3y" />
         <button type="submit">Locate!</button>
     </EditForm>
<br/><br/>

     <ul>
         @foreach (var shape in searchedElements)
         {
             <li>The coordinates @shape.triangle.Vertex1, @shape.triangle.Vertex2, @shape.triangle.Vertex3 would be @shape.location</li>
         }
     </ul>

@code{     
    private Triangularity.Models.Image img { get; set; }
    private List<potentialShape> searchedElements = new List<potentialShape>();
    public int v1x = 10, v1y = 20, v2x = 10, v2y = 10, v3x = 20, v3y = 20;


    private int tester { get; set; }

    protected override void OnInitialized()
    {
        img = new Triangularity.Models.Image();
    }

    private void AddTriangle()
    {
        try
        {
            var addition = new potentialShape();
            addition.triangle = new Triangularity.Models.Triangle(v1x, v1y, v2x, v2y, v3x, v3y);
            addition.location = img.GetLocationByVertices(v1x, v1y, v2x, v2y, v3x, v3y);

            searchedElements.Add(addition);
        }
        catch
        {
            //Do something brilliant
        }
    }

    public class potentialShape
    {
        public Triangularity.Models.Triangle triangle { get; set; }
        public int v1x = 10, v1y = 20, v2x = 10, v2y = 10, v3x = 20, v3y = 20;

        public string location { get; set; }
    }
}

